****************************************************************************************************************************
Swap Alternate
****************************************************************************************************************************

public class Solution {
    
    static void swaps(int arr[],int s, int t)
    {  
        int temperary=arr[s];
        arr[s]=arr[t];
          arr[t]=temperary;
    }
    public static void swapAlternate(int arr[]) {
    	//Your code goes here
        for(int i=1;i<arr.length;i+=2)
        swaps(arr,i-1,i);
    }
}
****************************************************************************************************************************
Output:

/* Testing =1
array sizz =6 means a[0],a[1]...a[5]
value :-  122 456 452 789 25 34 
result :- swaping in two values in term ( 2nd,1st) (4th,3rd)...
456 122 789 452 34 25
*/
****************************************************************************************************************************

****************************************************************************************************************************
Find Unique
****************************************************************************************************************************
****************************************************************************************************************************
public class Solution{  

    public static int findUnique(int[] arr)
    {
		//Your code goes here
    int result= arr[0];
    for(int i=1; i<arr.length;i++)
    {
      result=result^arr[i];
    }
    return result;
    }
}
/* testing =1
7= array indexing
given array 2 3 1 6 3 2 3
unique value is :- 1 
*/

****************************************************************************************************************************
Find Duplicate
****************************************************************************************************************************

import java.util.*;
public class Solution
{  
    
    public static int duplicateNumber(int arr[])
     {
    	//Your code goes here
        HashMap<Integer, Integer> mp = new HashMap<>();

         for(int i = 0;i<arr.length; i++)
         {
           
            if(mp.containsKey(arr[i]))
            {
                mp.put(arr[i], mp.get(arr[i])+1);
            }
            else
            {
                mp.put(arr[i], 1);
            }
        }
        int result = 0;
        for(int i = 1;i<arr.length; i++
        ){
            
            if(mp.get(arr[i])==2){
             result  =  arr[i];
            }
        }
        return result ;
    }
}
****************************************************************************************************************************
/* 1= Testing phase
9= array size [ a[0],a[1]....a[8] ]
0 7 2 5 4 7 1 3 6


result value:- 7
*/
****************************************************************************************************************************
Intersection of Two Arrays II
****************************************************************************************************************************

public class Solution{  
    
    public static void intersections(int arr1[], int arr2[]) {
    	//Your code goes here
        int z=-1;
        for(int i=0;i<arr1.length;i++)
        {
            for(int j=0; j<arr2.length;j++)
            {
                if(arr1[i]==arr2[j])
                {
                    System.out.print(arr1[i]+ " ");
                    arr1[i]=z;
                    --z;
                     arr2[j]=z;
                     --z;
                }
            }
        }
    }
}
****************************************************************************************************************************
output::
2
6
2 6 8 5 4 3
4
2 3 4 7 
2
10 10
1
10
****************************************************************************************************************************
****************************************************************************************************************************
Pair Sum
****************************************************************************************************************************
public class Solution {  

    public static int pairSum(int arr[], int x) 
    {
    	//Your code goes here
        int p=0;
        for(int i=0; i<arr.length;i++)
        {
            for(int j=i+1; j<arr.length;j++)
            {
            if(arr[i]+arr[j]==x) // sum of two index then x let count the nom
            {
                p+=1;
            }
        }
    } 
    return p;
 }
}
****************************************************************************************************************************
/* array given 
sum of two element= then */
****************************************************************************************************************************
Triplet Sum
****************************************************************************************************************************

public class Solution 
{
    
    public static int findTriplet(int[] arr, int x) 
    {
        
    	//Your code goes here
        int z=0;
        for(int i=0; i<arr.length; i++)
        {
            for (int j=i+1; j<arr.length;j++)
            {
                for(int k=j+1; k<arr.length; k++)
                {
                    if(arr[i]+arr[j]+arr[k]==x) // three indexing sum then value and count the no count no is z;
                    {
                        z++;
                    }
                }
            }
        }
return z;
    }

}
****************************************************************************************************************************
Output::
Input::
1
7
1 2 3 4 5 6 7 
12

****************************************************************************************************************************
Sort 0 1
****************************************************************************************************************************
import java.util.*;
public class Solution {  

    public static void sortZeroesAndOne(int[] arr) 
    {
    	//Your code goes here
           int z=0;
           int l=arr.length-1;
           while(z<l)
           {
               if(arr[z]==0)
               {
                   z++;
               }
               else
               {
                int temperary_value=arr[z];
                arr[z]=arr[l];
                arr[l]=temperary_value;
                l--;
               }
           }
    }
}
****************************************************************************************************************************
/* testing= 1
given element =7
<only 0 and 1 formate> 0 1 1  0  1 1  0
result= 0  0 0 1 1 1 1
*/
****************************************************************************************************************************
Return Array Sum
****************************************************************************************************************************

public class Solution {
	
	public static int sum(int[] array) {
		//Your code goes here
		int s = 0;
		for( int i = 0; i<array.length; i++)
		{
			s+=array[i];
		}
		return s;
	}
	}// 2 test case
	//  5 array indexing 
	// adding index.
  
****************************************************************************************************************************  
  Linear Search
 **************************************************************************************************************************** 
  
public class Solution {

    public static int linearSearch(int arr[], int x)
   {
		for(int i=0;i<arr.length; i++)
    {
      if(arr[i]==x)
      {
        return i;
      }
    }
    return -1; // means not presenting in array
    }
}
/* 1 = test case
7= integer length
2 13 4 1 3 6 28= write array
3= search element 
3= a[4] result is indexing 4.
*/

****************************************************************************************************************************
Arrange Numbers in Array
****************************************************************************************************************************

public class Solution {
    
    public static void arrange(int[] arr, int n)
     {
    	//Your code goes here
     int p=0;
     for(int i=0; i<arr.length;i++)
     {
         if(i%2==0)
         {
             arr[p]=i+1;
             p++;
         }
     }
        
        for(int i=arr.length;i>0;i--)
        {
            if(i%2==0)
            {
                arr[p]=i;
                p++;
            }
        }
    }
}
****************************************************************************************************************************
output: 5

