--------------------------------------------------------------------------------------------------------------------------------------------
Super Primes
--------------------------------------------------------------------------------------------------------------------------------------------


import java.util.*;
import java.lang.*;
import java.io.*;

public class Solution {
	static void SieveOfEratosthenes
                (int n, boolean isPrime[])
    {
        isPrime[0] = isPrime[1] = false;
        for (int i=2; i<=n; i++)
            isPrime[i] = true;
     
        for (int p=2; p*p<=n; p++)
        {
            if (isPrime[p] == true)
            {
                for (int i=p*2; i<=n; i += p)
                    isPrime[i] = false;
            }
        }
    }

    static void superPrimes(int n)
    {
        boolean isPrime[]=new boolean[n+1];
        SieveOfEratosthenes(n, isPrime);
     
        
        int primes[] = new int[n+1];
        int j = 0;
         
        for (int p=2; p<=n; p++)
            if (isPrime[p])
                primes[j++] = p;
 
        for (int k=0; k<j; k++)
            if (isPrime[k+1])
                System.out.print(primes[k]+ " ");
    }
     
    public static void main(String args[])
    {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        superPrimes(n);
    }
}


--------------------------------------------------------------------------------------------------------------------------------------------
Game of numbers
--------------------------------------------------------------------------------------------------------------------------------------------



import java.util.*;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int y = sc.nextInt();
        int count = 0;
        while (x != y) {
            if (y > x && y % 2 == 0) {
                y /= 2;
                count++;
            } else {
                y += 1;
                count++;
            }
        }
        System.out.println(count);
    }
}


--------------------------------------------------------------------------------------------------------------------------------------------
Even sum
--------------------------------------------------------------------------------------------------------------------------------------------


import java.util.*;
import java.lang.*;
import java.io.*;

public class Solution {
    static int find_num_of_ways(int arr[], int N)
    {
        int count_even = 0, count_odd = 0;

        // Finding the count of even
        // and odd elements
        for(int i = 0; i < N; i++)
        {
            if (arr[i] % 2 == 1)
            {
                count_odd++;
            }
            else
            {
                count_even++;
            }
        }

        // If count_odd is odd then
        // no. of ways is count_odd
        if (count_odd % 2 == 1)
        {
            return count_odd;
        }

        // Else no. of ways is count_even
        else
        {
            return count_even;
        }
    }

    // Driver Code
    public static void main (String[] args)
    {

        // Given array arr[]
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int arr[] = new int[n];
        for(int i =0; i<n;i++){
            arr[i] = scanner.nextInt();
        }

        // Function call
        System.out.print(find_num_of_ways(arr, n));
    }
}	

--------------------------------------------------------------------------------------------------------------------------------------------
Calculator
--------------------------------------------------------------------------------------------------------------------------------------------

import java.util.*;
import java.lang.*;
import java.io.*;

public class Solution {
    public static void main (String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        System.out.println(calculate(s));
    }
    static int index = 0;
    public static int calculate(String s) {
        int output = 0, n = s.length();
        char operation = '+'; // default

        while(index < n) {
            while(index < n && Character.isWhitespace(s.charAt(index))) {
                index++;
            }

            int currNumber = 0;
            while(index < n && Character.isDigit(s.charAt(index))) {
                currNumber = (currNumber * 10) + (s.charAt(index) - '0');
                index++;
            }

            while(index < n && Character.isWhitespace(s.charAt(index))) {
                index++;
            }

            if(operation == '+') {
                output += currNumber;
            } else if(operation == '-'){
                output -= currNumber;
            }

            if(index < n && s.charAt(index) == '(') {
                index++;
                int evaluated = calculate(s);
                if(operation == '+') output += evaluated;
                else output -= evaluated;
            }

            if(index < n && s.charAt(index) == ')') {
                index++; // return to above level
                break;
            }

            if(index < n && index < n) {
                operation = s.charAt(index);
            }
            index++;
        }
        return output;
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------
Array Cost
--------------------------------------------------------------------------------------------------------------------------------------------

import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class Solution {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Integer[] arr = new Integer[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        Arrays.sort(arr, Collections.reverseOrder());
        for (int i = 0; i < n; i++) {
            sum += arr[i];
            if ((i + 1) % 3 == 0) sum -= arr[i];
        }
        System.out.println(sum);
    }
}

