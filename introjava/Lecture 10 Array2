Binary search
************************************************************************************************************************
public class Solution {

    public static int binarySearch(int[] arr, int x) {
        // Your code goes here
        int f = 0;              // f=first
        int n=arr.length;
        int l = n - 1;         // last= n-1; (indexing= lastelement-1)
        while (f <= l) {
            int m = (f + l) / 2;
            if (arr[m] > x) {
                l = m - 1;
            } else if (arr[m] < x) {
                f = m + 1;
            } else {
                return m;
            }
        }
        return -1;
    }

}

/* binary search:- int x <value> , mid(m)=(first+last)/2:- f=first l=last*/

************************************************************************************************************************
Selection Sort
************************************************************************************************************************

public class Solution {  

    static void swap(int arr[], int p, int q )
    {
    	//Your code goes here
        // Swapping value 
        int temp_value= arr[p];
        arr[p]=arr[q];
        arr[q]= temp_value;
    }   

public static void selectionSort(int[] arr) {
    	//Your code goes here
        int n=arr.length;
        for(int p =0; p<n -1; p++)
        {
            int min = arr[p];
            int index = p;
            for(int q = p+1 ; q<n; q++)
            {
                if (arr[q]<min)
                {
                    min = arr[q];
                    index = q;
                }
            }
            swap(arr, p, index);
        }
    }   

}
/* output:-
1as test case
7 as indexing:-a[0], a[1]....a[6]
given value:-
2  3   4   1   3   6   28
Execute:- 
result as 1   2   3  3  4  6   28
*/
************************************************************************************************************************
Bubble sort
************************************************************************************************************************

public class Solution
 {   
      static void swap(int arr[], int p, int q )
    {
    	//Your code goes here
        // Swapping value 
        int temp_value= arr[p];
        arr[p]=arr[q];
        arr[q]= temp_value;
    }   

    public static void bubbleSort(int[] arr)
    {
    	//Your code goes here
        int n=arr.length;
        for(int p =0; p<n -1; p++) 
        {
            for(int q=0; q<n-1; q++)
            {
                if(arr[q]>arr[q+1])
                {
                    swap(arr,q,q+1);
                }
            }

        }
    }  
}

/* output:-
1 as test case
8 as indexing:-a[0], a[1]....a[7]
given value:-
2  3   4   1   3   6   28 29
Execute:- 
result as 1   2   3  3  4  6   28  29
*/

************************************************************************************************************************
Insertion Sort
************************************************************************************************************************
public class Solution {
    public static void insertionSort(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            int j = i - 1;
            int temp = arr[i];
            while (j >= 0 && arr[j] > temp) {
                arr[j + 1] = arr[j];

                j--;
            }
            arr[j + 1] = temp;
        }
    }
}

Merge sort of two Array

import java.util.*;
public class Solution {  

    public static int[] merge(int arr1[], int arr2[])
     {
    	//Your code goes here
        int arr[] = new int[arr1.length+arr2.length];
        int k = 0;
        int i = 0;
        int  j = 0;
        while(i<arr1.length && j<arr2.length)
        {
            if (arr1[i]<arr2[j]){
                arr[k] = arr1[i];
                i++;
                k++;
            }
            else if(arr1[i]>arr2[j])
            {
                arr[k] = arr2[j];
                j++;
                k++;
            }
            else{
                arr[k] = arr1[i];
                i++;
                k++;
                arr[k]= arr2[j];
                j++;
                k++;
            }
        }
        while(i<arr1.length)
        {
            arr[k] = arr1[i];
            i++;
            k++;
        }
        while(j<arr2.length)
        {
            arr[k] = arr2[j];
            j++;
            k++;
        }
        return arr;

    }

}
// 1 test case
// 5 index element
//  12 12 45 15 75
// 3 index element
// 2 8 35
// result :- 12 12 45 15 75 2 8 35

************************************************************************************************************************
************************************************************************************************************************
************************************************************************************************************************
Assignment
************************************************************************************************************************
************************************************************************************************************************
************************************************************************************************************************
Push Zeros in end
************************************************************************************************************************

public class Solution
 {   
      static void swap(int arr[], int p, int q )
    {
    	//Your code goes here
        // Swapping value 
        int temp_value= arr[p];
        arr[p]=arr[q];
        arr[q]= temp_value;
    }   

    public static void pushZerosAtEnd(int[] arr) 
    {
    	//Your code goes here
        int count=0;
        int n=arr.length;
        for(int p=0; p<n;p++)
        {
            if(arr[p]!=0)
            {
                swap(arr,p,count);
                count++;
            }
        }
    }

}
/* 1 as test
7 as index
given element:- 2 0 0 1 3 00
result:- 2 1 3 0 0 0 0 ( together nonzero-1st  and 2nd term- non zero)
*/

************************************************************************************************************************
Rotate Array
************************************************************************************************************************
public class Solution { 
    static void swap(int arr[], int p, int q){
        int temp_value= arr[p];
        arr[p] = arr[q];
        arr[q] = temp_value;
    }  
    static void rev(int arr[],int  l ,int  h){
        while(l<h){
            swap(arr, l, h);
            l++;
            h--;
        }

    }

    public static void rotate(int[] arr, int d) {
    	//Your code goes here
        int n = arr.length;
        if(d>n){
            d = d%n;
        }
        rev(arr, 0, d-1);
        rev(arr, d , n-1);
        rev(arr, 0, n-1);
        
    }

}

************************************************************************************************************************
Second Largest in Array
************************************************************************************************************************
public class Solution {

    public static int secondLargestElement(int[] arr)
     {
        // Your code goes here
        int lar = Integer.MIN_VALUE;
        ;
        int sec = Integer.MIN_VALUE;
        for (int i = 0; i < arr.length; i++)
         {
            if (arr[i] > lar)
           {
                sec = lar;
                lar = arr[i];
            } else if (arr[i] > sec && arr[i] != lar) 
            {
                sec = arr[i];
            }
        }
        return sec;
    }

}

************************************************************************************************************************
Check arrayRotation
************************************************************************************************************************

public class Solution {

    public static int arrayRotateCheck(int[] arr)
    {
    	//Your code goes here
        int result = 0;
        for(int i = 1 ; i<arr.length; i++)
        {
            if (arr[i]<arr[i-1])
            {
             result = i;
            }
        }
        return result;
    }

}

************************************************************************************************************************
Sort 0 1 2
************************************************************************************************************************

public class Solution {
     static void swap(int arr[], int i, int j)
     {
        int temp_value = arr[i];
        arr[i] = arr[j];
        arr[j] = temp_value;
    }    

    public static void sort012(int[] arr)
    {
    	//Your code goes here
        int  i = 0 ; 
        int j = arr.length-1;
        int m= 0;
        while(m<=j)
        {
            if (arr[m] ==0)
            {
                swap(arr, i, m);
                m++;
                i++;
            }
            else if (arr[m] == 2)
            {
                swap(arr, m ,j);
                j--;
            }
            else
            {
                m++;
            }

        }
    }

}
/* 1 as test case
7 indexing element
0 1 2 0 2 0 1
result:- 0 0 0 1 1 2 2 
*/

************************************************************************************************************************
Sum  of two array
************************************************************************************************************************

public class Solution {

    public static void sumOfTwoArrays(int arr1[], int arr2[], int output[]) {
    	//Your code goes here
        int m = arr1.length-1;
        int n = arr2.length-1;
        int c = 0;
        
        int x = Math.max(m,n) + 1;        
        
        while(m >= 0 && n>=0){
            int sum = arr1[m] + arr2[n] + c;
            output[x] = sum%10;
            c = sum/10;
            m--;
            n--;
            x--;
        }
        
        while(m >= 0){
            int sum = arr1[m] + c;
            output[x] = sum%10;
            c = sum/10;
            m--;
            x--;
        }
        while(n >= 0){
            int sum = arr2[n] + c;
            output[x] = sum%10;
            c = sum/10;
            n--;
            x--;
        }
        output[0] = c;
    }
}

************************************************************************************************************************
output::

1 // Test case
3 // indexing array 1
6 2 4
3// indexing arrray 2 
7 5 6

Result:
13 8 0

************************************************************************************************************************


