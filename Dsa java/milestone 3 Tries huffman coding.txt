Skip to content
Search or jump toâ€¦
Pull requests
Issues
Codespaces
Marketplace
Explore
 
@Ajeetkumar098 
Ankitv1998
/
Dsa_Java_Milestone_2
Public
Fork your own copy of Ankitv1998/Dsa_Java_Milestone_2
Code
Issues
Pull requests
Actions
Projects
Security
Insights
Dsa_Java_Milestone_2/Tries and Huffman Coding
@Ankitv1998
Ankitv1998 Create Tries and Huffman Coding
Latest commit 0645804 19 hours ago
 History
 1 contributor
512 lines (404 sloc)  10.1 KB

***********************************************************************************************************************
Code: Search word in Trie
***********************************************************************************************************************

class TrieNode{

	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}


public class Trie {

	private TrieNode root;
	public int count;
	public Trie() {
		root = new TrieNode('\0');
	}

	public boolean search(String word){
		// Write your code here
		TrieNode currentNode = root;
		for (int i = 0; i < word.length(); i++) {
			int childIndex = word.charAt(i) - 'a';
			TrieNode child = currentNode.children[childIndex];
			if (child == null) {
				return false;
			}
			currentNode = child;
		}
		return currentNode.isTerminating;
	}
	


	private void add(TrieNode root, String word){
		if(word.length() == 0){
			root.isTerminating = true;
			return;
		}		
		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
		if(child == null){
			child = new TrieNode(word.charAt(0));
			root.children[childIndex] = child;
			root.childCount++;
		}
		add(child, word.substring(1));

	}

	public void add(String word){
		add(root, word);
	}
}


***********************************************************************************************************************
Count Words in Trie
***********************************************************************************************************************

class TrieNode{
	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}


public class Trie {

	private TrieNode root;
	private int numWords;

	public Trie() {
		root = new TrieNode('\0');
		numWords = 0;
	}
	

	public void remove(String word){
		if(remove(root, word)) {
			numWords--;
		}
	}
	

	private boolean remove(TrieNode root, String word) {
		if(word.length() == 0){
			if(root.isTerminating) {
				root.isTerminating = false;
				return true;
			}
			else {
				return false;
			}
		}
		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
		if(child == null){
			return false;
		}
		boolean ans = remove(child, word.substring(1));
		// We can remove child node only if it is non terminating and its number of children are 0	

		if(!child.isTerminating && child.childCount == 0){
			root.children[childIndex] = null;
			child = null;
			root.childCount--;
		}
		return ans;
	}

	private boolean add(TrieNode root, String word){
		if(word.length() == 0){
			if(root.isTerminating) {
				return false;
			}
			else {
				root.isTerminating = true;
				return true;
			}
		}		
		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
		if(child == null){
			child = new TrieNode(word.charAt(0));
			root.children[childIndex] = child;
			root.childCount++;
		}
		return add(child, word.substring(1));
	}

	public void add(String word){
		if(add(root, word)) {
			numWords++;
		}
	}
	
	public int countWords() {
		// Write your code here
		return numWords;
	}
	
}

***********************************************************************************************************************
Assignment
***********************************************************************************************************************

***********************************************************************************************************************
Pattern Matching
***********************************************************************************************************************


import java.util.ArrayList;

class TrieNode {
	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}

public class Trie {

	private TrieNode root;
	private int count;

	public Trie() {
		root = new TrieNode('\0');
		count = 0;
	}

	public void add(String word) {
		if (insert(root, word)) {
			this.count++;
		}
	}

	private boolean insert(TrieNode root, String word) {
		if (word.length() == 0) {
			if (!root.isTerminating) {
				root.isTerminating = true;
				return true;
			} else {
				return false;
			}
		}
		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
		if (child == null) {
			child = new TrieNode(word.charAt(0));
			root.children[childIndex] = child;
			root.childCount++;
		}
		return insert(child, word.substring(1));
	}

	public boolean search(String word) {
		return search(root, word);
	}

	private boolean search(TrieNode root, String word) {
		if (word.length() == 0) {
			return true;
		}
		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
		if (child == null) {
			return false;
		}
		return search(child, word.substring(1));

	}

	public void remove(String word) {
		if (delete(root, word)) {
			this.count--;
		}
	}

	private boolean delete(TrieNode root, String word) {

		if (word.length() == 0) {
			if (root.isTerminating) {
				root.isTerminating = false;
				return true;
			} else {
				return false;
			}
		}

		int childIndex = word.charAt(0) - 'a';
		TrieNode childNode = root.children[childIndex];
		if (childNode == null) {
			return false;
		}
		boolean ans = delete(childNode, word.substring(1));

		if (!childNode.isTerminating && childNode.childCount == 0) {
			root.children[childIndex] = null;
			root.childCount--;
		}

		return ans;
	}

	public int countWords() {
		return count;

	}

	public boolean patternMatching(ArrayList<String> input, String pattern) {

		for (int i = 0; i < input.size(); i++) {

			String string = input.get(i);
			Trie suffixTrie = new Trie();
			for (int j = 0; j < string.length(); j++) {
				suffixTrie.add(string.substring(j));
			}
			if (suffixTrie.search(pattern)) {
				return true;
			}

		}
		return false;

	}
}


***********************************************************************************************************************
Palindrome Pair
***********************************************************************************************************************

import java.util.ArrayList;

class TrieNode {
	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}

public class Trie {

	private TrieNode root;
	public int count;

	public Trie() {
		root = new TrieNode('\0');
	}

	private void add(TrieNode root, String word) {
		if (word.length() == 0) {
			root.isTerminating = true;
			return;
		}

		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];

		if (child == null) {
			child = new TrieNode(word.charAt(0));
			root.children[childIndex] = child;
			root.childCount++;
		}

		add(child, word.substring(1));
	}

	public void add(String word) {
		add(root, word);
	}

	private boolean search(TrieNode root, String word) {
		if (word.length() == 0) {
			return true;
		}

		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];

		if (child == null) {
			return false;
		}

		return search(child, word.substring(1));

	}

	public boolean search(String word) {
		return search(root, word);
	}

	private void print(TrieNode root, String word) {
		if (root == null) {
			return;
		}

		if (root.isTerminating) {
			System.out.println(word);
		}

		for (TrieNode child : root.children) {
			if (child == null) {
				continue;
			}
			String fwd = word + child.data;
			print(child, fwd);
		}
	}

	public void print() {
		print(this.root, "");
	}

	/* ..................... Palindrome Pair................... */

	public String reverse(String word) {

		String xString = "";
		for (int i = word.length() - 1; i >= 0; i--) {
			xString += word.charAt(i);
		}
		return xString;

	}

	public boolean isPalindromePair(ArrayList<String> words) {

		for (int i = 0; i < words.size(); i++) {

			String string = reverse(words.get(i));

			Trie suffixTrie = new Trie();
			for (int j = 0; j < string.length(); j++) {
				suffixTrie.add(string.substring(j));
			}
			for (String word : words) {
				if (suffixTrie.search(word)) {
					return true;
				}
			}

		}
		return false;

	}

}


***********************************************************************************************************************
Auto complete
***********************************************************************************************************************


import java.util.ArrayList;

class TrieNode {
	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}

public class Trie {
	private TrieNode root;
	public int count;

	public Trie() {
		root = new TrieNode('\0');
	}

	private void add(TrieNode root, String word) {
		if (word.length() == 0) {
			root.isTerminating = true;
			return;
		}
		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
		if (child == null) {
			child = new TrieNode(word.charAt(0));
			root.children[childIndex] = child;
			root.childCount++;
		}
		add(child, word.substring(1));
	}

	public void add(String word) {
		add(root, word);
	}

	private void suggestions(TrieNode root, String prefix) {
		if (root == null) {
			return;
		}

		if (root.isTerminating) {
			System.out.println(prefix);
		}

		for (int i = 0; i < 26; i++) {
			TrieNode child = root.children[i];
			if (child != null) {
				char ch = (char) (i + 'a');
				suggestions(child, prefix + ch);
			}
		}
	}

	public void autoComplete(ArrayList<String> input, String word) {
		for (String str : input) {
			add(str);
		}

		TrieNode current = root;

		// traverse the trie till the end of the prefix
		for (int i = 0; i < word.length(); i++) {
			int index = word.charAt(i) - 'a';
			if (current.children[index] == null) {
				return;
			}
			current = current.children[index];
		}

		// recursively find all the suggestions
		suggestions(current, word);
	}
}

Footer
Â© 2023 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
Dsa_Java_Milestone_2/Tries and Huffman Coding at main Â· Ankitv1998/Dsa_Java_Milestone_2
