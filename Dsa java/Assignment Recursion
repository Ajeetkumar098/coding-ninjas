******************************************************************************************************************************
Geometric SUm
******************************************************************************************************************************


import java.util.*;
public class solution 
{

	public static double findGeometricSum(int k)
	{
		// Write your code here
		if (k==0)
		{
			return 1;
		}
		double ans = 1/(Math.pow(2,k)); // 1/(2^k) 
		return ans+findGeometricSum(k-1); // 1 + 1/2 + 1/4 + 1/8 + ... + 1/(2^k)
	}
}
/*Output:
Input:- 3
(1)+(1/2)+(1/2*2)+(1/2*2*2)
Result: 1.93750
*/


******************************************************************************************************************************
Check Polindrome Recursively
******************************************************************************************************************************

public class solution
{
		public static boolean isStringPalindrome(String input) 
	{
		// Write your code here
		if (input.length() <= 1) 
		{
			return true;
		}
		if (input.charAt(0) == input.charAt(input.length() - 1))
	    {
			return isStringPalindrome(input.substring(1, input.length() - 1));
		} 
		else
		{
			return false;
		}
	}
}
/*output
input: ankna or ankkna
result:- true
*/


******************************************************************************************************************************
Sum of digit_Recursively
******************************************************************************************************************************

public class solution 
{
	public static int sumOfDigits(int input)
	{
		// Write your code here
		if (input <= 0) {
			return 0;
		}
		return input % 10 + sumOfDigits(input / 10); // 12345 % 10=remainder(5) and / means quoitent
	}
}

/*
Input:- 12345
result:- 15
*/


******************************************************************************************************************************
Multiplicative_Recursively
******************************************************************************************************************************

public class solution 
{

	public static int multiplyTwoIntegers(int m, int n)
	{
		// Write your code here
	   if(n==0)
	   {
		   return 0;
	   }
	   return m+(multiplyTwoIntegers(m, n-1));
	}
}


******************************************************************************************************************************
Count Zeros
******************************************************************************************************************************

public class solution
 {

	public static int countZerosRec(int input)
	{
		// Write your code here
		  if (input < 10) {
			if (input == 0)
				return 1;
			else
				return 0;
		}
		int smallAns = countZerosRec(input / 10);
		if (input % 10 == 0)
			smallAns = 1 + smallAns;
		return smallAns;
	}
}
/*input:- 4526000005
result: 5*/

******************************************************************************************************************************
String to Integer
******************************************************************************************************************************

public class solution
 {

	public static int convertStringToInt(String input)
	{
		// Write your code here
       if (input.length() == 1) 
	   {
			return Integer.parseInt(Character.toString(input.charAt(0)));
		}
		int c = Integer.parseInt(Character.toString(input.charAt(0)));
		int d = c * (int) (Math.pow(10, input.length() - 1));
		return d + convertStringToInt(input.substring(1));
	}
	}


******************************************************************************************************************************
Pair Star
******************************************************************************************************************************

public class solution
 {

	// Return the updated string
	public static String addStars(String s) 
	{
		// Write your code here
		if (s.length() <= 1) 
		{
			return s;
		}
		if (s.charAt(0) == s.charAt(1)) 
		{
			return s.charAt(0) + "*" + addStars(s.substring(1));
		} else
	    {
			return s.charAt(0) + addStars(s.substring(1));
		}

	}
}
/*Input:- aaaa
result:- a* a*a*a*  */

******************************************************************************************************************************
Check AB
******************************************************************************************************************************

public class Solution 
{
	public static boolean checkAB(String input) 
	{
		// Write your code here
		if(input.length()==0)
		{
			return true;
		}
		if (input.charAt(0) == 'a')
		 {
			if (input.substring(1).length() > 1 && input.substring(1, 3).equals("bb"))
		    {
				return checkAB(input.substring(3));
			} 
			else
			 {
				return checkAB(input.substring(1));
			 }
		}  
		else
		{
			return false;
		}
		}
}

******************************************************************************************************************************
Stair case
******************************************************************************************************************************

public class Solution {
     public static int staircase(int n){
         if (n<0)
         {
             return 0;
         }
         else if (n==0)
         {
             return 1;
         }
         return staircase(n-1)+staircase(n-2)+staircase(n-3);
	}
}
/*  Hint: A  child is only to staircase in only 3 steps   */
