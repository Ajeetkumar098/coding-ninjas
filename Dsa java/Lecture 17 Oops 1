***************************************************************************************
1. Complex Number Problem
***************************************************************************************


/******************
 * Following is the main function we are using internally.
 * Refer this for completing the ComplexNumbers class
 * 
 
 public static void main(String[] args) {
		Scanner s = new Scanner(System.in);

		int real1 = s.nextInt();
		int imaginary1 = s.nextInt();

		int real2 = s.nextInt();
		int imaginary2 = s.nextInt();

		ComplexNumbers c1 = new ComplexNumbers(real1, imaginary1);
		ComplexNumbers c2 = new ComplexNumbers(real2, imaginary2);

		int choice = s.nextInt();
		 
		if(choice == 1) {
			// Add
			c1.plus(c2);
			c1.print();
		}
		else if(choice == 2) {
			// Multiply
			c1.multiply(c2);
			c1.print();
		}
		else {
			return;
		}
	}
 ******************/

public class ComplexNumbers
 {
	// Complete this class
	int image;
	int real;
	ComplexNumbers(int real , int im)  // real number as real and im means imaginary number
	// constructor
	{
		this.real = real;
		this.image = im;
	}
	public void plus(ComplexNumbers n)   // if C1 = 4 + i5 and C2 = 3 +i1
	// 2. plus 															//C1.plus(C2) results as  
																//C1 = 7 + i6 and C2 = 3 + i1
	{
		this.real+=n.real; // a+=b means a=a+b
		this.image+=n.image; // image=image+n.image means complex number n
	}
	public void multiply(ComplexNumbers n)
	// multiply:- i*i=-1 ( as imaginary no)
	{
		int r = this.real*n.real;  // r as real number
		int c1 = this.real*n.image+this.image*n.real; // complex no 1st 
		int i = -1*this.image*n.image; // i*i =-1
		this.real = r+i; // (a+ib)*(a-ib)= a^2 - i^2* b*2 ( i^2=-1) =final result as a^2+b^2
		this.image = c1; // imaginary no  as complex no resultant
	}
	public void print() // print the format a+ib as imaginary<0 value is 
	{
		if (this.image<0)
		{
			System.out.print(this.real+" - i"+Math.abs(this.image)); // Math.abs means absolute positive value
		}
		else{
			System.out.print(this.real+" + i"+(this.image));
		}
	}
}

/*Ouput:-
 10 15 // 10+15i
 12 40 // 12+40i
 2  // multiple
 Result:- -480+i580*/

 /*Output:
 10 15 
 12 40 
 1 // Addition of imaginary no
 Result:- 22 + i55 */





***************************************************************************************
2. Polynomial class Problem
***************************************************************************************

/* Signature of four required functions is given in the code. You can create other functions as well if you need.
*  Also you should submit your code even if you are not done with all the functions. 
*/

// Main used internally is shown here just for your reference.
/*public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int degree1[] = new int[n];
		for(int i = 0; i < n; i++){
			degree1[i] = s.nextInt();
		}
		int coeff1[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff1[i] = s.nextInt();
		}
		Polynomial first = new Polynomial();
		for(int i = 0; i < n; i++){
			first.setCoefficient(degree1[i],coeff1[i]);
		}
		n = s.nextInt();
		int degree2[] = new int[n];
		for(int i = 0; i < n; i++){
			degree2[i] = s.nextInt();
		}
		 int coeff2[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff2[i] = s.nextInt();
		}
		Polynomial second = new Polynomial();
		for(int i = 0; i < n; i++){
			second.setCoefficient(degree2[i],coeff2[i]);
		}
		int choice = s.nextInt();
		Polynomial result;
		switch(choice){
		// Add
		case 1: 
			 result = first.add(second);
			result.print();
			break;
		// Subtract	
		case 2 :
			 result = first.subtract(second);
			result.print();
			break;
		// Multiply
		case 3 :
			 result = first.multiply(second);
			result.print();
			break;
		}

	}
  */


public class Polynomial {

	
	/* This function sets coefficient for a particular degree value, if degree is not there in the polynomial
	 *  then corresponding term with specified degree and value is added int the polynomial. If the degree
	 *  is already present in the polynomial then previous coefficient is replaced by
	 *  new coefficient value passed as function argument
	*/
	int cof[] = new int[1000];
	public void setCoefficient(int degree, int coeff)
	{

		this.cof[degree] = coeff;
	}
	
	// Prints all the terms(only terms with non zero coefficients are to be printed) in increasing order of degree. 
	public void print()
	{
		for(int i = 0 ; i <this.cof.length; i++){
			if(this.cof[i]!=0){
				System.out.print(this.cof[i]+"x"+i+ " ");
			}
		}
		
	}


	
	// Adds two polynomials and returns a new polynomial which has result
	public Polynomial add(Polynomial p)
	{
     for(int i = 0; i<this.cof.length; i++){
			for(int j = 0; j<p.cof.length; j++){
				if( i==j && (this.cof[i] != 0 || p.cof[j] !=0 )){
					this.cof[i] = this.cof[i]+p.cof[j];
				}
			}
		}
		return this;
		
	}
	
	// Subtracts two polynomials and returns a new polynomial which has result
	public Polynomial subtract(Polynomial p)
	{
		for(int i = 0; i<this.cof.length; i++){
			for(int j = 0; j<p.cof.length; j++){
				if( i==j && (this.cof[i] != 0 || p.cof[j] != 0)){
					this.cof[i] = this.cof[i]-p.cof[j];
				}
			}
		}
		return this;
	}
	
	// Multiply two polynomials and returns a new polynomial which has result
	public Polynomial multiply(Polynomial p)
	{
		Polynomial a = new Polynomial();
		for(int i = 0; i<this.cof.length/2; i++){
			for(int j = 0; j<p.cof.length/2; j++){
				if(this.cof[i]!=0 && p.cof[j]!=0 ){
					a.cof[i+j] += this.cof[i]*p.cof[j];
				}
			}
		}
		return a;
	}
}
