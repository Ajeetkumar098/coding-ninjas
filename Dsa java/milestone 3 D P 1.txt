**********************************************************************************************************************************************************************
    Byte Landian
************************************************************************************************************************************************************************

import java.util.HashMap;
public class Solution {
    
	public static long bytelandian(long n, HashMap<Long, Long> memo) {
        // Write your code here
        //Handle base case for n=0,1
        if (n<12)
        {
            memo.put(n,n);
            return n;
        }
        
        if (!memo.containsKey(n))
        {
            long ans1=bytelandian(n/2,memo);
        	long ans2=bytelandian(n/3,memo);
        	long ans3=bytelandian(n/4,memo);
        
        	long currVal=ans1+ans2+ans3;
        	if (currVal>n)
            	memo.put(n,currVal);
        	else
            	memo.put(n,n);
            
        }
        
        return memo.get(n);
            
        /*
        //Recursive solution
        
        memo.put((long)0,(long)0);
        memo.put((long)1,(long)1);
        
        for (int i=2;i<=n;i++)
        {
            long ans1=memo.get(i/2);
            long ans2=memo.get(i/3);
            long ans3=memo.get(i/4);
            
            long currentVal=ans1+ans2+ans3;
            if (currentVal>i)
            {
                memo.put((long)i,currentVal);
            }
            else
            {
                memo.put((long)i,(long)i);
            }
        }
        
        return memo.get(n);
        */    
	}

}

******************************************************************************************************************************************************************
    Coin Tower
*******************************************************************************************************************************************************************

public class Solution {

	public static String findWinner(int n, int x, int y) {
		//Your code goes here
        int[] dp = new int[n+1];
        // 0 - Whis wins ; 1 - Beerus wins
        dp[0]=0;
        dp[1]=1;
    
        for (int i=2;i<=n;i++)
        {
            //Beerus wins if dp[i-1] or dp[i-x] or dp[i-y] is 0, i.e, Whis wins when the number of coins is (i-1), (i-x) or (i-y)
            //If none of them are 0, then Beerus cannot win => This means Whis wins for i number of coins
            if (dp[i-1]==0)
            {
                dp[i]=1;
            }
            else if ((i-x)>=0 && dp[i-x]==0)
            {
                dp[i]=1;
            }
            else if ((i-y)>=0 && dp[i-y]==0)
            {
                dp[i]=1;
            }
            else
            {
                dp[i]=0;
            }
            /*
            if (dp[i]==1)
            	System.out.println("For n="+i+" coins, Winner is: Beerus");
        	else
            	System.out.println("For n="+i+" coins, Winner is: Whis");
            */
        }
        
        if (dp[n]==1)
            return "Beerus";
        else
            return "Whis";
	}

}

********************************************************************************************************************************************************************
    Loot Houses
*******************************************************************************************************************************************************************

public class Solution {

	public static int maxMoneyLooted(int[] houses) {
		//Your code goes here
        //Handling the base cases where number of houses = 0,1,2
        if (houses.length==0)
            return 0;
        
        if (houses.length==1)
            return houses[0];
        
        if (houses.length==2)
            return Math.max(houses[0],houses[1]);
        
        int n = houses.length;
        int[] dp = new int[n];
        dp[0]=houses[0];
        dp[1]=Math.max(houses[0],houses[1]);
        
        for (int i=2;i<n;i++)
        {
            //For every house, we consider two cases
            //Case 1 - Current house is counted as part of the max value => This means the previous house cannot be counted
            int maxVal1=dp[i-2]+houses[i];
            
            //Case 2 - Current house is not counted as part of the max value => This means previous house can be counted
            int maxVal2=dp[i-1];
            
            //Max value till current house is maximum of the two possible max values till now
            dp[i]=Math.max(maxVal1,maxVal2);
        }
        
        //Final element of dp stores max possible value for given number of houses and their respective amounts of loot
        return dp[n-1];
        
	}

}

*********************************************************************************************************************************************************************
    Min Steps to One
*****************************************************************************************************************************************************************

public class Solution {
    
	public static int countMinStepsToOne(int n) {
		//Your code goes here
        if (n<=1)
            return 0;
        else if (n==2 || n==3)
            return 1;
        
       int output1=countMinStepsToOne(n-1);
       int output2=Integer.MAX_VALUE;
       int output3=Integer.MAX_VALUE;
        
       if (n%2==0)
           output2=countMinStepsToOne(n/2);
        
       if (n%3==0)
           output3=countMinStepsToOne(n/3);
        
       return Math.min(Math.min(output2,output3),output1)+1;
	}

}

****************************************************************************************************************************************************************
    Min steps to 1 using
**********************************************************************************************************************************************************************

public class Solution {

	public static int countMinStepsToOne(int n) {
		//Your code goes here
        if (n==0 || n==1)
            return 0;
        else if (n==2 || n==3)
            return 1;
        
        int[] dp = new int[n+1];
        for (int i=0;i<n+1;i++)
            dp[i]=-1;
        
        //Setting base cases
        dp[1]=0;
        dp[2]=1;
        dp[3]=1;
        for (int i=4;i<=n;i++)
        {
            //System.out.println("Current i: "+i);
            int ans1=dp[i-1];
            int ans2=Integer.MAX_VALUE,ans3=Integer.MAX_VALUE;
            if (i%2==0)
            {
                ans2=dp[i/2];
            }
            if (i%3==0)
            {
                ans3=dp[i/3];
            }
            //System.out.println("ans1: "+ans1+", ans2: "+ans2+", ans3: "+ans3);
            dp[i]=Math.min(ans1,Math.min(ans2,ans3))+1;
            //System.out.println(i+": "+dp[i]);
        }
        return dp[n];
	}

}

*************************************************************************************************************************************************************************
    Minimum Number of Squares
&*********************************************************************************************************************************************************************

public class Solution {

	public static int minCount(int n) {
		//Your code goes here
        int dp[] = new int[n+1];
        for (int i=0;i<n+1;i++)
            dp[i]=-1;
        
        return minCountHelper(n,dp);
	}
    
    private static int minCountHelper(int n, int[] dp)
    {
        if (n==0)
            return 0;
        
        int minVal = Integer.MAX_VALUE;
        for (int i=1;i*i<=n;i++)
        {
            if (dp[n-(i*i)]==-1)
                dp[n-(i*i)]=minCountHelper(n-(i*i),dp);
            int currVal = dp[n-(i*i)];
            if (currVal<minVal)
                minVal=currVal;
        }
        
        return minVal+1;
    }

}

******************************************************************************************************************************************************************8
     Stair Case
*******************************************************************************************************************************************************************

public class Solution {

	public static long staircase(int n) {
		//Your code goes here
        /*
        //If we reach n=0, we have found a path
        if (n==0)
            return 1;
        
        //If n<0, the steps we took till then don't work
        else if(n<0)
            return 0;
        
        return staircase(n-1)+staircase(n-2)+staircase(n-3);        
		*/
               
        if(n<=1)
            return 1;
        if(n==2)
            return 2;
        
        long dpCount[] = new long[n+1];
        dpCount[0]=1;
        dpCount[1]=1;
        dpCount[2]=2;

        
        for (int i=3;i<=n;i++)
        {
            dpCount[i]=dpCount[i-1]+dpCount[i-2]+dpCount[i-3];
                
        }
        return dpCount[n];
	}

}

