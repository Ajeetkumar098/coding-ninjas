**************************************************************************************************************************************************
Min Cost Path Problem
**************************************************************************************************************************************************

public class Solution {

	public static int minCostPath(int[][] input) {
		int m = input.length;
		int n = input[0].length;
		
		// Create a DP table to store the minimum cost to reach each cell
		int[][] dp = new int[m][n];
		dp[0][0] = input[0][0];
		
		// Initialize the first row and first column of the DP table
		for (int i = 1; i < m; i++) {
			dp[i][0] = dp[i-1][0] + input[i][0];
		}
		for (int j = 1; j < n; j++) {
			dp[0][j] = dp[0][j-1] + input[0][j];
		}
		
		// Fill the rest of the DP table
		for (int i = 1; i < m; i++) {
			for (int j = 1; j < n; j++) {
				dp[i][j] = input[i][j] + Math.min(dp[i-1][j], Math.min(dp[i][j-1], dp[i-1][j-1]));
			}
		}
		
		return dp[m-1][n-1];
	}
}

**************************************************************************************************************************************************
LCS - Problem
**************************************************************************************************************************************************


public class Solution {

	public static int lcs(String s, String t) {
		int m = s.length();
		int n = t.length();
		
		// Create a DP table to store the lengths of LCS for substrings of s and t
		int[][] dp = new int[m+1][n+1];
		
		// Fill the DP table using the following recurrence relation:
		// dp[i][j] = dp[i-1][j-1] + 1 if s[i-1] == t[j-1]
		// dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if s[i-1] != t[j-1]
		for (int i = 1; i <= m; i++) {
			for (int j = 1; j <= n; j++) {
				if (s.charAt(i-1) == t.charAt(j-1)) {
					dp[i][j] = dp[i-1][j-1] + 1;
				} else {
					dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
				}
			}
		}
		
		return dp[m][n];
	}
}

**************************************************************************************************************************************************
Edit Distance
**************************************************************************************************************************************************


public class Solution {
    public static int editDistance(String s, String t) {
        int m = s.length();
        int n = t.length();
        int[][] dp = new int[m+1][n+1];
        
        // Initialize the base cases
        for (int i = 0; i <= m; i++) {
            dp[i][0] = i;
        }
        for (int j = 0; j <= n; j++) {
            dp[0][j] = j;
        }
        
        // Fill the dp array using the recursive formula
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (s.charAt(i-1) == t.charAt(j-1)) {
                    dp[i][j] = dp[i-1][j-1];
                } else {
                    int delete = dp[i-1][j] + 1;
                    int replace = dp[i-1][j-1] + 1;
                    int insert = dp[i][j-1] + 1;
                    dp[i][j] = Math.min(delete, Math.min(replace, insert));
                }
            }
        }
        
        return dp[m][n];
    }
}

**************************************************************************************************************************************************
0 1 Knapsack - Problem
**************************************************************************************************************************************************


public class Solution {

    public static int knapsack(int[] weights, int[] values, int n, int maxWeight) {
        int[][] dp = new int[n + 1][maxWeight + 1];

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= maxWeight; j++) {
                if (weights[i - 1] > j) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], values[i - 1] + dp[i - 1][j - weights[i - 1]]);
                }
            }
        }

        return dp[n][maxWeight];
    }

}

**************************************************************************************************************************************************
Ways To Make Coin Change
**************************************************************************************************************************************************


public class Solution {

    public static int countWaysToMakeChange(int denominations[], int value) {
        int n = denominations.length;

        // dp[i][j] stores the number of ways to make the change for value j
        // using only the first i denominations
        int[][] dp = new int[n + 1][value + 1];

        // There is only one way to make the change for value 0
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }

        // There are no ways to make the change for a negative value
        for (int j = 1; j <= value; j++) {
            dp[0][j] = 0;
        }

        // Compute the number of ways to make the change for each value
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= value; j++) {
                if (denominations[i - 1] > j) {
                    // Cannot use the ith denomination
                    dp[i][j] = dp[i - 1][j];
                } else {
                    // Can either use the ith denomination or not use it
                    dp[i][j] = dp[i - 1][j] + dp[i][j - denominations[i - 1]];
                }
            }
        }

        return dp[n][value];
    }
}

**************************************************************************************************************************************************
Assignment
**************************************************************************************************************************************************
Maximum Square Matrix With All Zeros
**************************************************************************************************************************************************


public class Solution {

	public static int findMaxSquareWithAllZeros(int[][] input) {
		int n = input.length;
		if (n == 0) {
			return 0;
		}
		int m = input[0].length;
		if (m == 0) {
			return 0;
		}
		int[][] dp = new int[n][m];
		int max = 0;
		for (int i = 0; i < n; i++) {
			dp[i][0] = input[i][0] == 0 ? 1 : 0;
			max = Math.max(max, dp[i][0]);
		}
		for (int j = 0; j < m; j++) {
			dp[0][j] = input[0][j] == 0 ? 1 : 0;
			max = Math.max(max, dp[0][j]);
		}
		for (int i = 1; i < n; i++) {
			for (int j = 1; j < m; j++) {
				if (input[i][j] == 0) {
					dp[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1])) + 1;
					max = Math.max(max, dp[i][j]);
				}
			}
		}
		return max;
	}

}

**************************************************************************************************************************************************
Smallest Super-Sequence
**************************************************************************************************************************************************


public class Solution {

	public static int smallestSuperSequence(String str1, String str2) {
		// find length of the longest common subsequence
		int m = str1.length();
		int n = str2.length();
		int[][] dp = new int[m+1][n+1];
		for (int i = 1; i <= m; i++) {
			for (int j = 1; j <= n; j++) {
				if (str1.charAt(i-1) == str2.charAt(j-1)) {
					dp[i][j] = dp[i-1][j-1] + 1;
				} else {
					dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
				}
			}
		}
		// length of shortest super-sequence = sum of lengths of both strings - length of lcs
		return m + n - dp[m][n];
	}
}


**************************************************************************************************************************************************
Magic Grid
**************************************************************************************************************************************************


public class Solution {
    
    public static int getMinimumStrength(int[][] grid) {
        
        int n = grid.length;
        int m = grid[0].length;
        
        int[][] dp = new int[n][m];
        
        // initializing last cell with 1
        dp[n-1][m-1] = 1;
        
        // initializing last column
        for(int i=n-2; i>=0; i--){
            dp[i][m-1] = dp[i+1][m-1] - grid[i+1][m-1];
            if(dp[i][m-1] <= 0) dp[i][m-1] = 1;
        }
        
        // initializing last row
        for(int j=m-2; j>=0; j--){
            dp[n-1][j] = dp[n-1][j+1] - grid[n-1][j+1];
            if(dp[n-1][j] <= 0) dp[n-1][j] = 1;
        }
        
        // filling remaining cells
        for(int i=n-2; i>=0; i--){
            for(int j=m-2; j>=0; j--){
                int right = dp[i][j+1] - grid[i][j+1];
                int down = dp[i+1][j] - grid[i+1][j];
                int next = Math.min(right, down);
                if(next <= 0) next = 1;
                dp[i][j] = next;
            }
        }
        
        return dp[0][0] - grid[0][0];
    }
}

**************************************************************************************************************************************************
Minimum Number of Chocolates
**************************************************************************************************************************************************


import java.util.Arrays;
public class Solution {

	public static int getMin(int arr[], int N) {
		int[] dp = new int[N];
		Arrays.fill(dp, 1);

		// Traverse from left to right to satisfy the condition for increasing scores
		for (int i = 1; i < N; i++) {
			if (arr[i] > arr[i - 1]) {
				dp[i] = dp[i - 1] + 1;
			}
		}

		// Traverse from right to left to satisfy the condition for decreasing scores
		for (int i = N - 2; i >= 0; i--) {
			if (arr[i] > arr[i + 1] && dp[i] <= dp[i + 1]) {
				dp[i] = dp[i + 1] + 1;
			}
		}

		int sum = 0;
		for (int i = 0; i < N; i++) {
			sum += dp[i];
		}
		return sum;
	}
}

**************************************************************************************************************************************************
Subset Sum
**************************************************************************************************************************************************


import java.util.*;

public class Solution {
    static boolean isSubsetPresent(int[] arr, int n, int sum) {
        boolean[][] dp = new boolean[n + 1][sum + 1];
        
        // Initialize first column as true (0 sum is possible with empty set)
        for(int i = 0; i <= n; i++) {
            dp[i][0] = true;
        }
        
        // Initialize first row as false (cannot make a sum > 0 with an empty set)
        for(int j = 1; j <= sum; j++) {
            dp[0][j] = false;
        }
        
        // Fill the dp table
        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= sum; j++) {
                if(arr[i-1] <= j) {
                    dp[i][j] = dp[i-1][j] || dp[i-1][j-arr[i-1]];
                } else {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        // Return the value in the last cell of the table
        return dp[n][sum];
    }
}
